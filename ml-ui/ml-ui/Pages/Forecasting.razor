@page "/forecasting"
@using Radzen
@using Radzen.Blazor
@using ml_ui.Services
@using ml_ui.ViewModels
@inject WebSocketDataConnector DataProvider
@inject IMlForecastingService MlForecaster


<PageTitle>Forecasting</PageTitle>

<RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
    <h1>FORECASTING, PREDICTING</h1>
    <h3>Singular Spectrum Analysis (SSA) model for univariate time-series forecasting</h3>
    <a href="url">https://learn.microsoft.com/en-us/dotnet/machine-learning/tutorials/time-series-demand-forecasting</a>
    <a href="url">https://learn.microsoft.com/pl-pl/dotnet/api/microsoft.ml.forecastingcatalog?view=ml-dotnet</a>

    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@ViewModel.ShowDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" Component="dataLabels" />
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenLabel Text="Nr of data" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="20" Max="2000" @bind-Value=@ViewModel.HowManyToGenerate Style="width: 200px;" />
                <RadzenLabel Text="@ViewModel.HowManyToGenerate.ToString()" Component="valueSlider" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <h1><RadzenBadge BadgeStyle="BadgeStyle.Info" Text="RANDOM" /></h1>

            <RadzenLabel Text="Upper bound" Component="valueSlider" />
            <RadzenSlider Name="valueSlider" Min="0" Max="1000" @bind-Value=@ViewModel.RandomUpperBound Style="width: 200px;" />
            <RadzenLabel Text="@ViewModel.RandomUpperBound.ToString()" Component="valueSlider" />

            <RadzenLabel Text="Lower bound" Component="valueSlider" />
            <RadzenSlider Name="valueSlider" Min="-1000" Max="0" @bind-Value=@ViewModel.RandomLowerBound Style="width: 200px;" />
            <RadzenLabel Text="@ViewModel.RandomLowerBound.ToString()" Component="valueSlider" />


            <RadzenLabel Text="Nr of discrepancies" Component="valueSlider" />
            <RadzenSlider Name="valueSlider" Min="0" Max="30" @bind-Value=@ViewModel.RandomDiscrepanciesAmount Style="width: 200px;" />
            <RadzenLabel Text="@ViewModel.RandomDiscrepanciesAmount.ToString()" Component="valueSlider" />

            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Size="ButtonSize.Small" Click="@(GenerateNewRandomData)" Text="GO" />

        </RadzenStack>
    </RadzenCard>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <h1><RadzenBadge BadgeStyle="BadgeStyle.Info" Text="LINEAR" /></h1>
                <RadzenLabel Text="Linear discrepancy" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="0" Max="7" @bind-Value=@ViewModel.LinearDiscrepancy Style="width: 200px;" />
                <RadzenLabel Text="@ViewModel.LinearDiscrepancy.ToString()" Component="valueSlider" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Size="ButtonSize.Small" Click="@(GenerateLinearData)" Text="GO" />
            </RadzenStack>
        </RadzenCard>

        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <h1><RadzenBadge BadgeStyle="BadgeStyle.Info" Text="SINE" /></h1>
                <RadzenLabel Text="Works best for bigger amount of data (eg 360)" Component="valueSlider" />
                <RadzenLabel Text="Sinus discrepancy" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="3" Max="7" @bind-Value=@ViewModel.SinusDiscrepancy Style="width: 200px;" />
                <RadzenLabel Text="@ViewModel.SinusDiscrepancy.ToString()" Component="valueSlider" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Size="ButtonSize.Small" Click="@(GenerateSinusData)" Text="GO" />
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
    <div>
        <h3>
            <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text=@ViewModel.ErrorOccuredText Visible=@ViewModel.ShowError />
        </h3>
    </div>
    <RadzenChart>
        <RadzenChartTooltipOptions Shared="false" />
        <RadzenLineSeries Smooth="true" Data="@ViewModel.Data" CategoryProperty="Date" Title="Dataset" ValueProperty="Value">
            @* <RadzenSeriesAnnotation Visible="true" TItem="DateIntegerDataViewModel" Data="@ViewModel.Data.Where(d=>d.IsAnomaly).FirstOrDefault()" OffsetY="-16" Text="Detection!" /> *@
            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="@ViewModel.ShowDataLabels" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="true" Data="@ViewModel.DataPointsPredicted" CategoryProperty="Date" Title="Forecasts" ValueProperty="Value">
            <RadzenMarkers Visible="true" Size="12" MarkerType="MarkerType.Triangle" />
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="true" Data="@ViewModel.RegressionTrainedModelDataOutput" Visible="@ViewModel.ShowTrainedModel" CategoryProperty="Date" Title="TrainedModel" ValueProperty="Value">
            <RadzenMarkers Visible="true" Size="12" MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="@ViewModel.ShowDataLabels" />
            <RadzenCategoryAxis Padding="20" />
        </RadzenLineSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
        </RadzenValueAxis>
    </RadzenChart>


    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Hor Gap="0.5rem">
                <h1><RadzenBadge BadgeStyle="BadgeStyle.Dark" Text="Predict future" /></h1>
                <RadzenCard>
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenLabel Text="Window size" Component="valueSlider" />
                        @* 'The input size for training should be greater than twice the window size.' *@
                        <RadzenSlider Name="valueSlider" Min="2" Max="@(ViewModel.Data.Count()/2 -1)" @bind-Value="@ViewModel.WindowSize" Style="width: 200px;" />
                        <RadzenLabel Text="@ViewModel.WindowSize.ToString()" Component="valueSlider" />

                        <RadzenLabel Text="Series lenght" Component="valueSlider" />
                        @* 'The series length should be greater than the window size.' *@
                        <RadzenSlider Name="valueSlider" Min="3" Max="@(ViewModel.Data.Count())" @bind-Value="@ViewModel.SeriesLenght" Style="width: 200px;" />
                        <RadzenLabel Text="@ViewModel.SeriesLenght.ToString()" Component="valueSlider" />

                        <RadzenLabel Text="Train size" Component="valueSlider" />
                        <RadzenSlider Name="valueSlider" Min="5" Max="@ViewModel.Data.Count()" @bind-Value="@ViewModel.TrainSize" Style="width: 200px;" />
                        <RadzenLabel Text="@ViewModel.TrainSize.ToString()" Component="valueSlider" />

                        <RadzenLabel Style="max-width: 350px" Text="There are more parameters like: 'isAdaptive', 'shouldStabilize', 'discountFactor', 'rank' etc... Please read Microsoft docs " />
                    </RadzenStack>
                </RadzenCard>

                <RadzenLabel Text="NrOfWeeksToPredict" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="1" Max="300" @bind-Value=@ViewModel.HowManyFutureWeeksToPredictSSA Style="width: 200px;" />
                <RadzenLabel Text="@ViewModel.HowManyFutureWeeksToPredictSSA.ToString()" Component="valueSlider" />

                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="refresh" Size="ButtonSize.Medium" Click="@(TrainSSA)" Text="TRAINING !" />
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="refresh" Size="ButtonSize.Medium" Click="@(ForecastDataBasedOnTrainedSSAModel)" Text="PREDICT !" />

            </RadzenStack>
        </RadzenCard>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Stretch" Gap="0.5rem">
        <RadzenCard>
            <h3>Regression trainer </h3>
            <div>
                <a href="url">https://github.com/dotnet/machinelearning-samples/tree/main/samples/csharp/getting-started/Regression_TaxiFarePrediction?WT.mc_id=dotnet-35129-website</a>
            </div>
            <div>
                <a href="url">https://github.com/dotnet/machinelearning-samples/tree/main/samples/csharp/getting-started/Regression_BikeSharingDemand</a>
            </div>
            <div>
                <a href="url">https://learn.microsoft.com/en-us/dotnet/machine-learning/tutorials/predict-prices</a>
            </div>
            <div>
                <a href="url">https://www.seldon.io/machine-learning-regression-explaineds</a>
            </div>
            <div>
                <a href="url">https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.sdcaregressiontrainer?view=ml-dotnet</a>
            </div>
            <div>
                <div>
                    A supervised machine learning task that is used to predict the value of the label from a set of related features. The label can be of any real value and is not from a finite set of values as in classification tasks. Regression algorithms model the dependency of the label on its related features to determine how the label will change as the values of the features are varied.
                    You can train a regression model using the following algorithms
                </div>
            </div>
        </RadzenCard>
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Hor Gap="0.5rem">
                <h1><RadzenBadge BadgeStyle="BadgeStyle.Dark" Text="Predict future" /></h1>
                <RadzenCard>
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenLabel Text="Regression learner/algorithm" Component="RegressionLearnerAlgorithm_radio" />
                        <RadzenRadioButtonList Name="RegressionLearnerAlgorithm_radio" @bind-Value=@ViewModel.RegressionLearner TValue="string" Orientation="Orientation.Vertical">
                            <Items>
                                <RadzenRadioButtonListItem Text="Decision Trees-FastTree" Value=@("FastTree") TValue="string" />
                                <RadzenRadioButtonListItem Text="Poisson" Value=@("Poisson") TValue="string" />
                                <RadzenRadioButtonListItem Text="Stochastic Dual Coordinate Ascent (SDCA)" Value=@("SDCA") TValue="string" />
                                <RadzenRadioButtonListItem Text="Tweedie distributions using decision tree" Value=@("FastTreeTweedie") TValue="string" />
                                <RadzenRadioButtonListItem Text="Gradient Boosting Machines (GBM)" Value=@("GBM") TValue="string" />
                                <RadzenRadioButtonListItem Text="Ordinary Least Squares (OLS) linear regression" Value=@("OLS") TValue="string" />
                                <RadzenRadioButtonListItem Text="Online Gradient Descent (OGD)" Value=@("ODG") TValue="string" />
                                <RadzenRadioButtonListItem Text="Generalized Additive Models (GAM)" Value=@("GAM") TValue="string" />
                                @* <RadzenRadioButtonListItem Text="Random forests" Value=@("RandomForests") TValue="string" /> *@
                            </Items>
                        </RadzenRadioButtonList>
                        <RadzenLabel Style="max-width: 350px" Text="There are parameters for every trainer. Please read Microsoft docs " />
                    </RadzenStack>
                </RadzenCard>
                <RadzenLabel Text="DatesOfPrediction" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="-200" Max="200" @bind-Value=@ViewModel.PreditionWeeksRelativeToDataSetEnd Style="width: 200px;" />
                <RadzenLabel Text="@ViewModel.PreditionWeeksRelativeToDataSetEnd.ToString()" Component="valueSlider" />

                <RadzenLabel Text="NrOfWeeksToPredict" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="1" Max="56" @bind-Value=@ViewModel.HowManyFutureWeeksToPredict Style="width: 200px;" />
                <RadzenLabel Text="@ViewModel.HowManyFutureWeeksToPredict.ToString()" Component="valueSlider" />

                <RadzenCheckBox @bind-Value="@ViewModel.ShowTrainedModel" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="ShowTrainedModel" Component="dataLabels" />

                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="refresh" Size="ButtonSize.Medium" Click="@(TrainLinearRegression)" Text="TRAINING !" />
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="refresh" Size="ButtonSize.Medium" Click="@(ForecastDataBasedOnTrainedRegressionModel)" Text="PREDICT !" />
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>

</RadzenStack>

@code {
    public ForecastingViewModel ViewModel = new ForecastingViewModel() { Data = new List<DateIntegerDataViewModel>(0) };

    protected override async Task OnInitializedAsync()
    {
        if (ViewModel.Data == null || !ViewModel.Data.Any())
        {
            await GenerateNewRandomData();
        }
    }

    private async Task GenerateNewRandomData()
    {
        ViewModel.Data = await DataProvider.GetIntegerRandomData(ViewModel.HowManyToGenerate, ViewModel.RandomUpperBound, ViewModel.RandomLowerBound, ViewModel.RandomDiscrepanciesAmount);
        ViewModel.SetUpDefaults();
    }

    private async Task GenerateLinearData()
    {
        ViewModel.Data = await DataProvider.GetLinearData(ViewModel.HowManyToGenerate, ViewModel.LinearDiscrepancy * 0.1f);
        ViewModel.SetUpDefaults();

    }

    private async Task GenerateSinusData()
    {
        ViewModel.Data = await DataProvider.GetSinusData(ViewModel.HowManyToGenerate, ViewModel.RandomUpperBound, ViewModel.SinusDiscrepancy * 0.1f);
        ViewModel.SetUpDefaults();
    }

    private async Task TrainSSA()
    {
        ViewModel.SetUpDefaults();
        try
        {
            (ViewModel.RegressionTrainedModelDataOutput, ViewModel.TrainedSSAModel) = await MlForecaster.TrainSSA(nameof(ml_data.DateData.Value), ViewModel.HowManyFutureWeeksToPredictSSA, ViewModel.WindowSize, ViewModel.SeriesLenght, ViewModel.TrainSize, ViewModel.Data);
        }
        catch (Exception e)
        {
            ViewModel.ErrorOccuredText = e.Message + e.InnerException?.Message;
            ViewModel.ShowError = true;
        }
    }

    private async Task ForecastDataBasedOnTrainedSSAModel()
    {
        ViewModel.ShowError = false;
        try
        {
            if (ViewModel.TrainedSSAModel is not null && ViewModel.Data is not null && ViewModel.Data.Any())
                ViewModel.DataPointsPredicted = await MlForecaster.ForecastBySSA(
                    ViewModel.TrainedSSAModel, ViewModel.Data.OrderBy(d => d.Date).Last().Date.AddDays(7 * ViewModel.PreditionWeeksRelativeToDataSetEnd), ViewModel.HowManyFutureWeeksToPredictSSA);
        }
        catch (Exception e)
        {
            ViewModel.ErrorOccuredText = e.Message + e.InnerException?.Message;
            ViewModel.ShowError = true;
        }
    }

    private async Task TrainLinearRegression()
    {
        ViewModel.SetUpDefaults();
        try
        {
            (ViewModel.RegressionTrainedModelDataOutput, ViewModel.TrainedRegressionModel) = await MlForecaster.TrainLinearRegression(ViewModel.RegressionLearner, nameof(ml_data.DateData.Value), ViewModel.Data);
        }
        catch (Exception e)
        {
            ViewModel.ErrorOccuredText = e.Message + e.InnerException?.Message;
            ViewModel.ShowError = true;
        }
    }

    private async Task ForecastDataBasedOnTrainedRegressionModel()
    {
        ViewModel.ShowError = false;
        try
        {
            if (ViewModel.TrainedRegressionModel is not null && ViewModel.Data is not null && ViewModel.Data.Any())
                ViewModel.DataPointsPredicted = await MlForecaster.ForerecastByLinearRegression(
                    ViewModel.TrainedRegressionModel, ViewModel.Data.OrderBy(d => d.Date).Last().Date.AddDays(7 * ViewModel.PreditionWeeksRelativeToDataSetEnd), ViewModel.HowManyFutureWeeksToPredict);
        }
        catch (Exception e)
        {
            ViewModel.ErrorOccuredText = e.Message + e.InnerException?.Message;
            ViewModel.ShowError = true;
        }
    }
}