@page "/forecasting"
@using Radzen
@using Radzen.Blazor
@using ml_ui.Services
@using ml_ui.ViewModels
@inject WebSocketDataConnector DataProvider
@inject IMlForecastingService MlForecaster


<PageTitle>Forecasting</PageTitle>

<RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
    <h1>FORECASTING, PREDICTING</h1>

    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" Component="dataLabels" />
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenLabel Text="Nr of data" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="20" Max="700" @bind-Value=@howManyToGenerate Style="width: 200px;" />
                <RadzenLabel Text="@howManyToGenerate.ToString()" Component="valueSlider" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <h1><RadzenBadge BadgeStyle="BadgeStyle.Info" Text="RANDOM" /></h1>

            <RadzenLabel Text="Upper bound" Component="valueSlider" />
            <RadzenSlider Name="valueSlider" Min="0" Max="10000000" @bind-Value=@randomUpperBound Style="width: 200px;" />
            <RadzenLabel Text="@randomUpperBound.ToString()" Component="valueSlider" />

            <RadzenLabel Text="Lower bound" Component="valueSlider" />
            <RadzenSlider Name="valueSlider" Min="-10000000" Max="0" @bind-Value=@lowerBound Style="width: 200px;" />
            <RadzenLabel Text="@lowerBound.ToString()" Component="valueSlider" />


            <RadzenLabel Text="Nr of discrepancies" Component="valueSlider" />
            <RadzenSlider Name="valueSlider" Min="0" Max="30" @bind-Value=@randomDiscrepanciesAmount Style="width: 200px;" />
            <RadzenLabel Text="@randomDiscrepanciesAmount.ToString()" Component="valueSlider" />

            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Size="ButtonSize.Small" Click="@(GenerateNewRandomData)" Text="GO" />

        </RadzenStack>
    </RadzenCard>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <h1><RadzenBadge BadgeStyle="BadgeStyle.Info" Text="LINEAR" /></h1>
                <RadzenLabel Text="Linear discrepancy" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="0" Max="7" @bind-Value=@linearDiscrepancy Style="width: 200px;" />
                <RadzenLabel Text="@linearDiscrepancy.ToString()" Component="valueSlider" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Size="ButtonSize.Small" Click="@(GenerateLinearData)" Text="GO" />
            </RadzenStack>
        </RadzenCard>

        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <h1><RadzenBadge BadgeStyle="BadgeStyle.Info" Text="SINE" /></h1>
                <RadzenLabel Text="Works best for bigger amount of data (eg 360)" Component="valueSlider" />
                <RadzenLabel Text="Sinus discrepancy" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="3" Max="7" @bind-Value=@sinusDiscrepancy Style="width: 200px;" />
                <RadzenLabel Text="@sinusDiscrepancy.ToString()" Component="valueSlider" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Size="ButtonSize.Small" Click="@(GenerateSinusData)" Text="GO" />
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>

    <RadzenChart>
        <RadzenChartTooltipOptions Shared="true" />
        <RadzenLineSeries Smooth="true" Data="@ViewModel.Data" CategoryProperty="Date" Title="Dataset" ValueProperty="Value">
            @* <RadzenSeriesAnnotation Visible="true" TItem="DateIntegerDataViewModel" Data="@ViewModel.Data.Where(d=>d.IsAnomaly).FirstOrDefault()" OffsetY="-16" Text="Detection!" /> *@
            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="@showDataLabels" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="true" Data="@ViewModel.DataPointsPredicted" CategoryProperty="Date" Title="Forecasts" ValueProperty="Value">
            <RadzenMarkers Visible="true" Size="12" MarkerType="MarkerType.Triangle" />
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="20" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
        </RadzenValueAxis>
    </RadzenChart>


    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Hor Gap="0.5rem">
                <h1><RadzenBadge BadgeStyle="BadgeStyle.Dark" Text="Predict future" /></h1>
                <RadzenCard>
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenLabel Text="Window size" Component="valueSlider" />
                        @* 'The input size for training should be greater than twice the window size.' *@
                        <RadzenSlider Name="valueSlider" Min="2" Max="@(ViewModel.Data.Count()/2 -1)" @bind-Value="@ViewModel.WindowSize" Change="@((int a)=>ViewModel.windowSizeOnChange(a))" Style="width: 200px;" />
                        <RadzenLabel Text="@ViewModel.WindowSize.ToString()" Component="valueSlider" />

                        <RadzenLabel Text="Series lenght" Component="valueSlider" />
                        @* 'The series length should be greater than the window size.' *@
                        <RadzenSlider Name="valueSlider" Min="3" Max="@(ViewModel.Data.Count())" @bind-Value="@ViewModel.SeriesLenght" Change="@((int a)=>ViewModel.seriesLenghtOnChange(a))" Style="width: 200px;" />
                        <RadzenLabel Text="@ViewModel.SeriesLenght.ToString()" Component="valueSlider" />

                        <RadzenLabel Text="Train size" Component="valueSlider" />
                        <RadzenSlider Name="valueSlider" Min="5" Max="@ViewModel.Data.Count()" @bind-Value="@ViewModel.TrainSize" Change="@((int a)=>ViewModel.trainSizeOnChange(a))" Style="width: 200px;" />
                        <RadzenLabel Text="@ViewModel.TrainSize.ToString()" Component="valueSlider" />

                        <RadzenLabel Style="max-width: 350px" Text="There are more parameters like: 'isAdaptive', 'shouldStabilize', 'discountFactor', 'rank' etc... Please read Microsoft docs " />
                    </RadzenStack>
                </RadzenCard>

                <RadzenLabel Text="NrOfWeeksToPredict" Component="valueSlider" />
                <RadzenSlider Name="valueSlider" Min="1" Max="7" @bind-Value=@howManyFutureWeeksToPredict Style="width: 200px;" />
                <RadzenLabel Text="@howManyFutureWeeksToPredict.ToString()" Component="valueSlider" />

                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="refresh" Size="ButtonSize.Medium" Click="@(Predict)" Text="PREDICT !" />
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
</RadzenStack>

<div>
</div>


@code {
    private bool showDataLabels = false;
    private int howManyToGenerate = 20;
    private int randomUpperBound = 20;
    private int lowerBound = -20;
    private int randomDiscrepanciesAmount = 2;
    private int linearDiscrepancy = 2;
    private int sinusDiscrepancy = 3;
    private int howManyFutureWeeksToPredict = 2;

    public ForecastingViewModel ViewModel = new ForecastingViewModel() { Data = new List<DateIntegerDataViewModel>(0) };

    protected override async Task OnInitializedAsync()
    {
        if (ViewModel.Data == null || !ViewModel.Data.Any())
        {
            await GenerateNewRandomData();
        }
    }

    private async Task GenerateNewRandomData()
    {
        ViewModel.Data = await DataProvider.GetIntegerRandomData(howManyToGenerate, randomUpperBound, lowerBound, randomDiscrepanciesAmount);
        ViewModel.SetUpDefaults();
    }

    private async Task GenerateLinearData()
    {
        ViewModel.Data = await DataProvider.GetLinearData(howManyToGenerate, linearDiscrepancy * 0.1f);
        ViewModel.SetUpDefaults();

    }

    private async Task GenerateSinusData()
    {
        ViewModel.Data = await DataProvider.GetSinusData(howManyToGenerate, randomUpperBound, sinusDiscrepancy * 0.1f);
        ViewModel.SetUpDefaults();
    }

    private async Task Predict()
    {
        ViewModel.DataPointsPredicted = await MlForecaster.Forecast(howManyFutureWeeksToPredict, ViewModel.WindowSize, ViewModel.SeriesLenght, ViewModel.TrainSize, ViewModel.Data);
    }
 
}